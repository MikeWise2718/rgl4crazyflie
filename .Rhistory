rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
?rgl
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
plotPartsInCircle <- function(partList, radius = 80) {   colors <- c("white", "gray", "gray", "green", "yellow", "darkgray", "black", "black")   alpha <- c(    0.4,     1,       1,       1,        1,       1,      1,        1)   shine <- c(    50,     50,      50,      50,       50,      50,     50,       50)   n <- length(partList)   for (i in 1:n) {     print(attr(partList[[i]],"partname"))     rad <- radius     ang <- (i - 1) * 2 * pi / n     cosang <- cos(ang)     sinang <- sin(ang)     off <- c(rad * cosang, rad * sinang, 0)     plotPart(partList[[i]], off, NULL, colors[[i]], alpha[[i]], shine[[i]])   }   addAxes(len = rad/2) } plotPartsInCircle(partList, 50)
plotPart <- function(vertList, trn = c(0,0,0), rot=NULL, color="silver",alpha=1,shiny=shiny) {   lx <- list()   ly <- list()   lz <- list()   xi <- 1   yi <- 2   zi <- 3   for (v in vertList) {     if (length(v) == 4) {       lx <- append(lx, v[[2]][xi] )       lx <- append(lx, v[[3]][xi] )       lx <- append(lx, v[[4]][xi])       ly <- append(ly, v[[2]][yi] )       ly <- append(ly, v[[3]][yi] )       ly <- append(ly, v[[4]][yi])       lz <- append(lz, v[[2]][zi] )       lz <- append(lz, v[[3]][zi] )       lz <- append(lz, v[[4]][zi] )     }   }   vx <- unlist(lx)    vy <- unlist(ly)    vz <- unlist(lz)    if (!is.null(rot)) {     print("rotating")     ux <- vx     uy <- vy     uz <- vz     vx <- ux*rot[1,1] + uy*rot[2,1] + uz*rot[3,1]     vx <- ux*rot[1,2] + uy*rot[2,2] + uz*rot[3,2]     vz <- ux*rot[1,3] + uy*rot[2,3] + uz*rot[3,3]   }   vx <- vx + trn[[xi]]   vy <- vy + trn[[yi]]   vy <- vz + trn[[zi]]   triangles3d( vx,vy,vz, color=color,alpha=alpha,shiny=shiny) } addAxes <- function(len = 1) {   u <- c(0,1)*len   v <- c(0,0)   w <- c(0, 0)   lines3d(u, v, w, color = c("red"))   text3d(u,v,w,c("","X"),color=c("red"))   lines3d(w,u,v,color=c("green"))   text3d(w,u,v,c("","Y"),color=c("green"))   lines3d(v,w,u,color=c("blue"))   text3d(v,w,u,c("","Z"),color=c("blue")) } # Load everything partList <- sapply(stlfiles, function(x) loadStl(stldir, x)) plotPartsInCircle <- function(partList, radius = 80) {   colors <- c("white", "gray", "gray", "green", "yellow", "darkgray", "black", "black")   alpha <- c(    0.4,     1,       1,       1,        1,       1,      1,        1)   shine <- c(    50,     50,      50,      50,       50,      50,     50,       50)   n <- length(partList)   for (i in 1:n) {     print(attr(partList[[i]],"partname"))     rad <- radius     ang <- (i - 1) * 2 * pi / n     cosang <- cos(ang)     sinang <- sin(ang)     trn <- c(rad * cosang, rad * sinang, 0)     plotPart(partList[[i]], trn, NULL, colors[[i]], alpha[[i]], shine[[i]])   }   addAxes(len = rad/2) } plotPartsInCircle(partList, 50)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
cls
rtvs::debug_source("rgl4crazyflie.R")
# Temp and ugly colors <- c("white", "gray", "gray", "green", "yellow", "darkgray", "black", "black") alpha <- c(0.4, 1, 1, 1, 1, 1, 1, 1) shine <- c(50, 50, 50, 50, 50, 50, 50, 50) for (i in 1:8) {   attr(partList[[i]],"color") <- colors[[i]]   attr(partList[[i]],"alpha") <- alpha[[i]]   attr(partList[[i]],"shine") <- shine[[i]] }
plotPartsInCircle <- function(partList, radius = 80) {   n <- length(partList)   for (i in 1:n) {     prt <- partList[[i]]     print(attr(prt,"partname"))     rad <- radius     ang <- (i - 1) * 2 * pi / n     cosang <- cos(ang)     sinang <- sin(ang)     trn <- c(rad * cosang, rad * sinang, 0)     clr <- attr(p,"color")     alf <- attr(p, "alpha")     shn <- attr(p, "shine")     plotPart(prt, trn, NULL, clr,alf,shn)   }   addAxes(len = rad/2) }
plotPartsInCircle(partList, 50)
plotPartsInCircle <- function(partList, radius = 80) {   n <- length(partList)   for (i in 1:n) {     prt <- partList[[i]]     print(attr(prt,"partname"))     rad <- radius     ang <- (i-1)*2*pi/n     cosang <- cos(ang)     sinang <- sin(ang)     trn <- c(rad * cosang, rad * sinang, 0)     clr <- attr(prt,"color")     alf <- attr(prt, "alpha")     shn <- attr(prt, "shine")     plotPart(prt, trn, NULL, clr,alf,shn)   }   addAxes(len = rad/2) } plotPartsInCircle(partList, 50)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
v <- as.numeric("1 2")
v
v <- as.numeric(str_split("1 2","\s")[[1]])
v <- as.numeric(str_split("1 2","\\s")[[1]])
v
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
?str_detect
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
?xml_find
?xml_find_first
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
?rgl.translate
?rgl.translate3d
?rgl
??rgl
translate3d
library(rgl)
translate3d
findAnywhere(translate3d)
findAnywhere("translate3d")
findanywhere("translate3d")
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- scale3d(cube3d(), x1, y1, z1)   wire3d(translate3d(mycube, x, y, z)) } printBox(0, 0, 0, 1, 1, 1)
open3d() x <- 0 y <- 0 z <- 0 x1 <- 0 y1 <- 0 z1 <- 0 mycube <- scale3d(cube3d(), x1, y1, z1) wire3d(translate3d(mycube, x, y, z))
open3d() x <- 0 y <- 0 z <- 0 x1 <- 1 y1 <- 1 z1 <- 1 mycube <- scale3d(cube3d(), x1, y1, z1) wire3d(translate3d(mycube, x, y, z))
cube3d
cube3d()
class(cube3d)
cc <- cube3d()
class(cc)
attributes(cc)
class(translate3d(cc))
class(translate3d(cc,1,1,1))
cct <- translate3d(cc,1,1,1)
rtvs::debug_source("rgl4crazyflie.R")
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- scale3d(cube3d(), x1, y1, z1)   wire3d(translate3d(mycube, x, y, z)) } addAxes <- function(len = 1) {   u <- c(0, 1) * len   v <- c(0, 0)   w <- c(0, 0)   lines3d(u, v, w, color = c("red"))   text3d(u, v, w, c("", "X"), color = c("red"))   lines3d(w, u, v, color = c("green"))   text3d(w, u, v, c("", "Y"), color = c("green"))   lines3d(v, w, u, color = c("blue"))   text3d(v, w, u, c("", "Z"), color = c("blue")) }
set.seed(123) for (i in 1:10) {   x <- runif(1)   y <- runif(1)   z <- runif(1)   sz <- 0.1   printBox(x, y, z, sz,sz,sz ) } addAxes()
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- scale3d(cube3d(), x1, y1, z1)   wire3d(translate3d(mycube, x, y, z)) } addAxes <- function(len = 1) {   # add some p   u <- c(0, 1) * len   v <- c(0, 0)   w <- c(0, 0)   lines3d(u, v, w, color = c("red"))   text3d(u, v, w, c("", "X"), color = c("red"))   lines3d(w, u, v, color = c("green"))   text3d(w, u, v, c("", "Y"), color = c("green"))   lines3d(v, w, u, color = c("blue"))   text3d(v, w, u, c("", "Z"), color = c("blue")) } set.seed(123) for (i in 1:4) {   x <- runif(1)   y <- runif(1)   z <- runif(1)   sz <- 0.1   printBox(x, y, z, sz,sz,sz ) } axes3d()
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 4 boxes along a line for (i in 1:4) {   x <- i/4 
  y <- i/4
  z <- i/4   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 4 boxes along a line for (i in 1:4) {   x <- i/4 
  y <- i/4
  z <- i/4   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 4 boxes along a line for (i in 1:4) {   x <- i/4 
  y <- i/4
  z <- i/4   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 4 boxes along a line #for (i in 1:4) {   #x <- i/4 
  #y <- i/4
  #z <- i/4   #printBox(x, y, z, 0.1,0.1,0.1 ) #} axes3d()  # add some axes
open3d()
axes3d()
open3d() #printBox <- function(x, y, z, x1, y1, z1) {   #mycube <- cube3d()                      # create a cube as mesh object      #mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   #mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   #wire3d(mycube)                          # now plot it as a wireframe #} # Display 4 boxes along a line #for (i in 1:4) {   #x <- i/4 
  #y <- i/4
  #z <- i/4   #printBox(x, y, z, 0.1,0.1,0.1 ) #} axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 4 boxes along a line #for (i in 1:4) {   #x <- i/4 
  #y <- i/4
  #z <- i/4   #printBox(x, y, z, 0.1,0.1,0.1 ) #} axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)) # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe   print ("here I am") } # Display 4 boxes along a line #for (i in 1:4) {   #x <- i/4 
  #y <- i/4
  #z <- i/4   #printBox(x, y, z, 0.1,0.1,0.1 ) #} axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe   print ("here I am") } # Display 4 boxes along a line #for (i in 1:4) {   #x <- i/4 
  #y <- i/4
  #z <- i/4   #printBox(x, y, z, 0.1,0.1,0.1 ) #} axes3d()  # add some axes
open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe   print ("here I am") }  Display 4 boxes along a line for (i in 1:4) {   x <- i/4 
  y <- i/4
  z <- i/4   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
library(rgl) open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe   print ("here I am") }  Display 4 boxes along a line for (i in 1:4) {   x <- i/4 
  y <- i/4
  z <- i/4   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
library(rgl) open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe }  Display 4 boxes along a line for (i in 1:4) {   x <- i/4 
  y <- i/4
  z <- i/4   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
library(rgl) open3d() printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 5 boxes along a diagonal line n <- 5 for (i in 1:n) {   x <- i/n 
  y <- i/n
  z <- i/n   sz <- i/(2*n)   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
library(rgl) open3d() # create and plot a box at (x,y,z) of size (x1,y1,z1) printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 5 boxes along a diagonal line n <- 5 for (i in 1:n) {   x <- i/n 
  y <- i/n
  z <- i/n   sz <- i/(2*n)   printBox(x, y, z, 0.1,0.1,0.1 ) } axes3d()  # add some axes
library(rgl) open3d() # create and plot a box at (x,y,z) of size (x1,y1,z1) printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 5 boxes along a diagonal line n <- 5 for (i in 1:n) {   x <- i/n 
  y <- i/n
  z <- i/n   sz <- i/(2*n)   printBox(x, y, z, sz,sz,sz ) } axes3d()  # add some axes
library(rgl) open3d() # create and plot a box at (x,y,z) of size (x1,y1,z1) printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 5 boxes along a diagonal line n <- 5 for (i in 1:n) {   x <- i/n 
  y <- i/n
  z <- i/n   sz <- 1/n   printBox(x, y, z, sz,sz,sz ) } axes3d()  # add some axes
library(rgl) open3d() # create and plot a box at (x,y,z) of size (x1,y1,z1) printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d()                      # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1)   # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z)  # now move it to x,y,z   wire3d(mycube)                          # now plot it as a wireframe } # Display 5 boxes along a diagonal line n <- 5 for (i in 1:n) {   x <- i/n 
  y <- i/n
  z <- i/n   sz <- 1/(2*n)   printBox(x, y, z, sz,sz,sz ) } axes3d()  # add some axes
library(rgl) open3d() # create and plot a box at (x,y,z) of size (x1,y1,z1) printBox <- function(x, y, z, x1, y1, z1) {   mycube <- cube3d() # create a cube as mesh object      mycube <- scale3d(mycube, x1, y1, z1) # now scale that object by x1,y1,z1   mycube <- translate3d(mycube, x, y, z) # now move it to x,y,z   wire3d(mycube) # now plot it to rgl as a wireframe } # Display 5 boxes along a diagonal line n <- 5 for (i in 1:n) {   x <- i / n   y <- i / n   z <- i / n   sz <- 1 / (2 * n)   printBox(x, y, z, sz, sz, sz) } axes3d() # add some axes
source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
306-54
232+54
232+46
306-46
  mList <- list()   idxList <- list()   pntList <- list()   mList[[1]] <- idxList   mList[[2]] <- pntList
v <- c(1.1,2.2,3.3)
addaddVert <- function(mList, v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   mList$pntList[[ np+1 ]] <- v   mList$idxList[[ ni+1 ]] <- ni+1   return(mList) }
addVert(mList,v)
addVert <- function(mList, v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   mList$pntList[[ np+1 ]] <- v   mList$idxList[[ ni+1 ]] <- ni+1   return(mList) }
addVert(mList,v)
mList
sum(T + T:exp(T + pi)) - T
T
ll <- list()
ll$asdf <- list()
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
startime <- Sys.time()
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
?rotate3d
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
traceback()
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
tail(vidx)
length(vpnt)
11700 / 3
shade3d(part)
traceback()
max(vidx)
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
max(vidx)
head(vpnt)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   mList$pntList[[np + 1]] <- v[1]   mList$pntList[[np + 2]] <- v[2]   mList$pntList[[np + 3]] <- v[3]   mList$idxList[[ni + 1]] <- ni + 1   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx) wire3d(part)
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   mList$pntList[[np + 1]] <- v[1]   mList$pntList[[np + 2]] <- v[2]   mList$pntList[[np + 3]] <- v[3]   mList$idxList[[ni + 1]] <- ni + 1   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx) wire3d(part)
?tmesh3d
addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   mList$pntList[[np + 1]] <- v[1]   mList$pntList[[np + 2]] <- v[2]   mList$pntList[[np + 3]] <- v[3]   mList$idxList[[ni + 1]] <- ni + 1   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homongenous=F) wire3d(part)
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   mList$pntList[[np + 1]] <- v[1]   mList$pntList[[np + 2]] <- v[2]   mList$pntList[[np + 3]] <- v[3]   mList$idxList[[ni + 1]] <- ni + 1   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homogeneous = F) wire3d(part)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   #  mList$pntList[[ np+1 ]] <- v[1]   #  mList$pntList[[ np+2 ]] <- v[2]   #  mList$pntList[[ np+3 ]] <- v[3]   #  mList$idxList[[ ni+1 ]] <- ni+1   mList$pntList <- c(mList$pntList,v[1],v[2],v[3])   mList$idxList <- c(mList$idxist,ni + 1)   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homogeneous = F) wire3d(part)
rtvs::debug_source("D:/local/rgl4crazyflie/onetri.R", encoding = "Windows-1252")
c(list(),1)
c(list(),1,2)
c(mList$pntList,v[1],v[2],v[3])
mList$pntList <- c(mList$pntList,v[1],v[2],v[3])
pntList <- c(mList$pntList,v[1],v[2],v[3])
a <- 2
source("D:/local/rgl4crazyflie/onetri.R", encoding = "Windows-1252")
rtvs::debug_source("D:/local/rgl4crazyflie/onetri.R", encoding = "Windows-1252")
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   #  mList$pntList[[ np+1 ]] <- v[1]   #  mList$pntList[[ np+2 ]] <- v[2]   #  mList$pntList[[ np+3 ]] <- v[3]   #  mList$idxList[[ ni+1 ]] <- ni+1   mList$pntList <- c(mList$pntList,v[1],v[2],v[3])   mList$idxList <- c(mList$idxist,ni + 1)   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homogeneous = F) wire3d(part)
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   #  mList$pntList[[ np+1 ]] <- v[1]   #  mList$pntList[[ np+2 ]] <- v[2]   #  mList$pntList[[ np+3 ]] <- v[3]   #  mList$idxList[[ ni+1 ]] <- ni+1   mList$pntList <- c(mList$pntList,v[1],v[2],v[3])   mList$idxList <- c(mList$idxist,ni + 1)   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homogeneous = F) wire3d(part)
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   #  mList$pntList[[ np+1 ]] <- v[1]   #  mList$pntList[[ np+2 ]] <- v[2]   #  mList$pntList[[ np+3 ]] <- v[3]   #  mList$idxList[[ ni+1 ]] <- ni+1   mList$pntList <- c(mList$pntList,v[1],v[2],v[3])   mList$idxList <- c(mList$idxist,ni + 1)   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homogeneous = F) wire3d(part)
rtvs::debug_source("D:/local/rgl4crazyflie/onetri.R", encoding = "Windows-1252")
rtvs::debug_source("D:/local/rgl4crazyflie/onetri.R", encoding = "Windows-1252")
library(rgl) open3d() addVert <- function(mList,v) {   ni <- length(mList$idxList)   np <- length(mList$pntList)   #  mList$pntList[[ np+1 ]] <- v[1]   #  mList$pntList[[ np+2 ]] <- v[2]   #  mList$pntList[[ np+3 ]] <- v[3]   #  mList$idxList[[ ni+1 ]] <- ni+1   mList$pntList <- c(mList$pntList,v[1],v[2],v[3])   mList$idxList <- c(mList$idxList,ni + 1)   return(mList) } addTri <- function(mList,v1,v2,v3) {   mList <- addVert(mList,v1)   mList <- addVert(mList,v2)   mList <- addVert(mList,v3)   return(mList) } mList <- list() mList$idxList <- list() mList$pntList <- list() v1 <- c(1,0,0) v2 <- c(0,1,0) v3 <- c(0,0,1) mList <- addTri(mList,v1,v2,v3) vidx <- unlist(mList$idxList) vpnt <- unlist(mList$pntList) part <- tmesh3d(vpnt,vidx,homogeneous = F) wire3d(part)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
traceback()
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria) m3dTetr <- qmesh3d(vertices = vert,indices = tetr) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
install.packages("alphashape3d")
library(rgl) library(alphashape3d) model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria) m3dTetr <- qmesh3d(vertices = vert,indices = tetr) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
install.packages("Morpho")
library(morpho)
library(Morpho)
library(rgl) library(alphashape3d) library(Morpho) model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria) m3dTetr <- qmesh3d(vertices = vert,indices = tetr) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
library(alphashape3d) library(Morpho) model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria,homogenous=F) m3dTetr <- qmesh3d(vertices = vert,indices = tetr,homogenous=F) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
library(alphashape3d) library(Morpho) model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria,homogeneous=F) m3dTetr <- qmesh3d(vertices = vert,indices = tetr,homogeneous=F) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] #vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria,homogeneous=F) m3dTetr <- qmesh3d(vertices = vert,indices = tetr,homogeneous=F) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
library(rgl) library(alphashape3d) library(Morpho) model <- ashape3d(rtorus(1000,0.5,2),alpha = 0.25) vert <- model$x[model$vert[,2] == 1,] #vert <- cbind(vert,rep(1,nrow(vert))) tria <- model$triang[model$triang[,4] == 1,1:3] tetr <- model$tetra[model$tetra[,6] == 1,1:4] m3dTria <- tmesh3d(vertices = vert,indices = tria,homogeneous=F) m3dTetr <- qmesh3d(vertices = vert,indices = tetr,homogeneous=F) m3d <- mergeMeshes(m3dTria,m3dTetr) plot.ashape3d(model) # works fine plot3d(m3d) # Error in x$vb[1, x$it] : subscript out of bounds
plot.ashape3d(model) # works fine
library(hash)
install.packages("hash")
v <- c(1.1,2.2,3.3)
h <- hash()
library(hash)
h <- hash()
h[v] <- 1
v1 <- c(1.2,1.3,1.4)
has.key(h,v)
has.key(v,h)
h[v]
h[v] <- 1
v
h[v]
h <- hash(letters,1:26)
h$a
h <- hash()
h[[v]] <- 1
h[v] <- 1
h
as.character(v)
sprintf("%e",v)
sprintf("%f",v)
sprintf("%e",v)
is.null(asdfasdf)
is.null("asdfasdf")
exists(asdfasdf)
exists("h")
exists("h1")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
v
vkey <- sprintf("%e",v)
has.key(vkey,vhashtab)
  vkey <- paste0(sprintf("%e",v))
vkey
  vkey <- paste0(sprintf("%e",v),collapse=",")
vkey
  vkey <- paste0(sprintf("%e",v),collapse=",")
has.key(vkey,vhashtab)
  vhashtab[vkey] <- ni+1
ni <- 0
  vhashtab[vkey] <- ni+1
vhashtab[vkey]
vhashtab[vkey][[2]]
vhashtab[vkey]
vhashtab
vhashtab[[1]] <- 2
vhashtab[1] <- 2
vhashtab[1] 
vhashtab[[1]] 
?get
hashtab.get(1,2)
vhashtab.get(1,2)
h <- hash(letters,1:26)
h[["a"]]
h["a"]
vhashtab[[vkey]]
rtvs::debug_source("rgl4crazyflie.R")
traceback()
rtvs::debug_source("rgl4crazyflie.R")
mList$idxList <- c(mList$idxList,ni + 1)
traceback()
rtvs::debug_source("rgl4crazyflie.R")
mList$idxList <- c(mList$idxList,ni + 1)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
sprintf("tmesh3d - nv:%d np:%d ni:%d maxi:%d mini:%d - vsaved:%d",nv,np,vi,max(vidx),min(vidx),vsv)
sprintf("tmesh3d - nv:%d np:%d ni:%d maxi:%d mini:%d",nv,np,vi,max(vidx),min(vidx))
sprintf("tmesh3d - nv:%d np:%d ni:%d",nv,np,vi)
sprintf("tmesh3d - nv:%d np:%d ",nv,np)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
matrix
rtvs::debug_source("rgl4crazyflie.R")
vpts <- matrix(vpnt,nrow = np / 3,ncol = 3)
vpts1 <- as.numeric(vpts)
bsq <- 0:(np-1)
    bsq <- 3*(0:(np-1))
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
v1 <- vpnt[bsq+1]
sum(is.na(va))
sum(is.na(v1))
length(v1)
    bsq <- 3*(0:(nv-1))
    cx <- mean(vpnt[bsq+1])
cx
length(bsq)
nv
np
length(    bsq <- 1:(np/3)-1)
    bsq <- 1:(np/3)-1
length(bsq)
    cx <- mean(vpnt[bsq+1])
cx
    cy <- mean(vpnt[bsq+2])
cy
    cz <- mean(vpnt[bsq+3])
cz
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
traceback()
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
val
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
clst <- grabComposition(stldir,"Crazyflie_assembly.xml") printComposition(clst)
grabComposition <- function(stldir,xfname) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   compList <- list()   itree <- xml_find_first(doc, "//*[local-name()='InstanceTree']")   its <- xml_find_all(doc, "//*[local-name()='Instance']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it, "name")     needpart <- str_split(compname,"-")[[1]][[1]]     thisCompPart <- list()     thisCompPart$compname <- compname     thisCompPart$partname <- partname     print(sprintf("Comp:%s need:%s",compname,needpart))     tform <- xml_find_first(it, ".//*[local-name()='Transform']")     if (length(tform) > 0) {       nrot <- xml_find_first(it, ".//*[local-name()='Rotation']")       rot <- matrix(as.numeric(str_split(xml_text(nrot), "\\s")[[1]]),3,3)       thisCompPart$trn <- rot       ntrn <- xml_find_first(it,".//*[local-name()='Translation']")       # no idea where this factor of 1000 comes from (mm -> meters?)       # some STL brain damage no doubt       trn <- 1000 * as.numeric(str_split(xml_text(ntrn),"\\s")[[1]])       thisCompPart$trn <- trn       compList[[compname]] <- thisCompPart     }   }   return(compList) } printComposition <- function(compList) {   for (cp in compList) {     print(sprintf("%s - %s",cp$compname,cp$partname))   } }
clst <- grabComposition(stldir,"Crazyflie_assembly.xml")
grabComposition <- function(stldir,xfname) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   compList <- list()   itree <- xml_find_first(doc, "//*[local-name()='InstanceTree']")   its <- xml_find_all(doc, "//*[local-name()='Instance']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it, "name")     needpart <- str_split(compname,"-")[[1]][[1]]     thisCompPart <- list()     thisCompPart$compname <- compname     thisCompPart$partname <- needpart     print(sprintf("Comp:%s need:%s",compname,needpart))     tform <- xml_find_first(it, ".//*[local-name()='Transform']")     if (length(tform) > 0) {       nrot <- xml_find_first(it, ".//*[local-name()='Rotation']")       rot <- matrix(as.numeric(str_split(xml_text(nrot), "\\s")[[1]]),3,3)       thisCompPart$trn <- rot       ntrn <- xml_find_first(it,".//*[local-name()='Translation']")       # no idea where this factor of 1000 comes from (mm -> meters?)       # some STL brain damage no doubt       trn <- 1000 * as.numeric(str_split(xml_text(ntrn),"\\s")[[1]])       thisCompPart$trn <- trn       compList[[compname]] <- thisCompPart     }   }   return(compList) } printComposition <- function(compList) {   for (cp in compList) {     print(sprintf("%s - %s",cp$compname,cp$partname))   } }
clst <- grabComposition(stldir,"Crazyflie_assembly.xml")
printComposition(clst)
printComposition <- function(compList) {   for (cp in compList) {     print(sprintf("%s - %s",cp$compname,cp$partname))     print(cp$rot)     print(cp$trn)   } }
printComposition(clst)
grabComposition <- function(stldir,xfname) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   compList <- list()   itree <- xml_find_first(doc, "//*[local-name()='InstanceTree']")   its <- xml_find_all(doc, "//*[local-name()='Instance']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it, "name")     needpart <- str_split(compname,"-")[[1]][[1]]     thisCompPart <- list()     thisCompPart$compname <- compname     thisCompPart$partname <- needpart     print(sprintf("Comp:%s need:%s",compname,needpart))     tform <- xml_find_first(it, ".//*[local-name()='Transform']")     if (length(tform) > 0) {       nrot <- xml_find_first(it, ".//*[local-name()='Rotation']")       rot <- matrix(as.numeric(str_split(xml_text(nrot), "\\s")[[1]]),3,3)       thisCompPart$rot <- rot       ntrn <- xml_find_first(it,".//*[local-name()='Translation']")       # no idea where this factor of 1000 comes from (mm -> meters?)       # some STL brain damage no doubt       trn <- 1000 * as.numeric(str_split(xml_text(ntrn),"\\s")[[1]])       thisCompPart$trn <- trn       compList[[compname]] <- thisCompPart     }   }   return(compList) }
clst <- grabComposition(stldir,"Crazyflie_assembly.xml")
printComposition(clst)
plotWholeThing <- function(partList,compList) {   for (cp in compList) {     #print(as.character(it))     compname <- cp$compname     needpart <- str_split(compname,"-")[[1]][[1]]     print(sprintf("Comp:%s need:%s",compname,needpart))     if (length(tform) > 0) {       rot <- cp$rot       ntrn <- xml_find_first(it,".//*[local-name()='Translation']")       # no idea where this factor of 1000 comes from (mm -> meters?)       # some STL brain damage no doubt       trn <- cp$trn       prt <- getElement(partList,needpart)       clr <- attr(prt,"color")       alf <- attr(prt,"alpha")       shn <- attr(prt,"shine")       #plotPart(compname,partname,prt, trn, rot, clr, alf, shn)       plotPartAsMesh(compname,partname,prt,trn,rot,clr,alf,shn)     }   }   addAxes(len = 50)   axes3d() }
plotWholeThing(partList,compList)
compList <- grabComposition(stldir,"Crazyflie_assembly.xml")
plotWholeThing(partList,compList)
plotWholeThing <- function(partList,compList) {   for (cp in compList) {     #print(as.character(it))     compname <- cp$compname     needpart <- str_split(compname,"-")[[1]][[1]]     print(sprintf("Comp:%s need:%s",compname,needpart))     rot <- cp$rot     ntrn <- xml_find_first(it,".//*[local-name()='Translation']")       # no idea where this factor of 1000 comes from (mm -> meters?)       # some STL brain damage no doubt     trn <- cp$trn     prt <- getElement(partList,needpart)     clr <- attr(prt,"color")     alf <- attr(prt,"alpha")     shn <- attr(prt,"shine")       #plotPart(compname,partname,prt, trn, rot, clr, alf, shn)     plotPartAsMesh(compname,partname,prt,trn,rot,clr,alf,shn)   }   addAxes(len = 50)   axes3d() }
plotWholeThing(partList,compList)
plotWholeThing <- function(partList,compList) {   for (cp in compList) {     compname <- cp$compname     needpart <- str_split(compname,"-")[[1]][[1]]     print(sprintf("Comp:%s need:%s",compname,needpart))     rot <- cp$rot     trn <- cp$trn     prt <- getElement(partList,needpart)     clr <- attr(prt,"color")     alf <- attr(prt,"alpha")     shn <- attr(prt,"shine")       #plotPart(compname,partname,prt, trn, rot, clr, alf, shn)     plotPartAsMesh(compname,partname,prt,trn,rot,clr,alf,shn)   }   addAxes(len = 50)   axes3d() }
plotWholeThing(partList,compList)
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   compList <- list()   itree <- xml_find_first(doc,"//*[local-name()='Parts']")   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- compList[[compname]]     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       amb <- xml_find_first(it,".//*[local-name()='Ambient']")       a1 <- xml_attr(amb,"r")       a2 <- xml_attr(amb,"g")       a3 <- xml_attr(amb,"b")       a4 <- xml_attr(amb,"a")       cp$ambient <- c(a1,a2,a3,a4)       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   compList <- list()   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- compList[[compname]]     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       amb <- xml_find_first(it,".//*[local-name()='Ambient']")       a1 <- xml_attr(amb,"r")       a2 <- xml_attr(amb,"g")       a3 <- xml_attr(amb,"b")       a4 <- xml_attr(amb,"a")       cp$ambient <- c(a1,a2,a3,a4)       print(cp$ambient)       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
rtvs::debug_source("rgl4crazyflie.R")
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- compList[[compname]]     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       amb <- xml_find_first(it,".//*[local-name()='Ambient']")       a1 <- xml_attr(amb,"r")       a2 <- xml_attr(amb,"g")       a3 <- xml_attr(amb,"b")       a4 <- xml_attr(amb,"a")       cp$ambient <- c(a1,a2,a3,a4)       print(cp$ambient)       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- compList[[compname]]     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       amb <- xml_find_first(it,".//*[local-name()='Ambient']")       a1 <- xml_attr(amb,"r")       a2 <- xml_attr(amb,"g")       a3 <- xml_attr(amb,"b")       a4 <- xml_attr(amb,"a")       cp$ambient <- c(a1,a2,a3,a4)       print(cp$ambient)       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- getelement(compList,compname)     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       amb <- xml_find_first(it,".//*[local-name()='Ambient']")       a1 <- xml_attr(amb,"r")       a2 <- xml_attr(amb,"g")       a3 <- xml_attr(amb,"b")       a4 <- xml_attr(amb,"a")       cp$ambient <- c(a1,a2,a3,a4)       print(cp$ambient)       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- getElement(compList,compname)     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       amb <- xml_find_first(it,".//*[local-name()='Ambient']")       a1 <- xml_attr(amb,"r")       a2 <- xml_attr(amb,"g")       a3 <- xml_attr(amb,"b")       a4 <- xml_attr(amb,"a")       cp$ambient <- c(a1,a2,a3,a4)       print(cp$ambient)       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
getElement <- function(partlist, need) {   print(sprintf("getElement:%s",need))   for (p in partlist) {     pelid <- attr(p,"partname")     print(sprintf("   detecting:%s", pelid))     if (str_detect(pelid,need)) {       print(sprintf("returning:%s", pelid))       return(p)     }   }   print(sprintf("returning NULL"))   return(NULL) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
rtvs::debug_source("rgl4crazyflie.R")
getCompElement <- function(compList,need) {   print(sprintf("getElement:%s",need))   for (p in compList) {     pelid <- attr(p,"compname")     print(sprintf("   detecting:%s",pelid))     if (str_detect(pelid,need)) {       print(sprintf("returning:%s",pelid))       return(p)     }   }   print(sprintf("returning NULL"))   return(NULL) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
p$compname
getCompElement <- function(compList,need) {   print(sprintf("getElement:%s",need))   for (p in compList) {     pelid <- p$compname     print(sprintf("   detecting:%s",pelid))     if (str_detect(pelid,need)) {       print(sprintf("returning:%s",pelid))       return(p)     }   }   print(sprintf("returning NULL"))   return(NULL) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
getCompElement <- function(compList,need) {   #print(sprintf("getElement:%s",need))   for (p in compList) {     pelid <- p$compname     #print(sprintf("   detecting:%s",pelid))     if (str_detect(pelid,need)) {       #print(sprintf("returning:%s",pelid))       return(p)     }   }   #print(sprintf("returning NULL"))   return(NULL) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- getCompElement(compList,compname)     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       nod <- xml_find_first(it,".//*[local-name()='Ambient']")       cp$ambient <- c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a"))       nod <- xml_find_first(it,".//*[local-name()='Diffuse']")       cp$diffuse <- c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a"))       nod <- xml_find_first(it,".//*[local-name()='Specular']")       cp$specular <- c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a"))       nod <- xml_find_first(it,".//*[local-name()='Emissive']")       cp$emissive <- c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a"))       print(sprintf("   amb - %.3f %.3f %.3f %.3f",cp$ambient))       print(sprintf("   dif - %.3f %.3f %.3f %.3f",cp$diffuse))       print(sprintf("   spc - %.3f %.3f %.3f %.3f",cp$specular))       print(sprintf("   emi - %.3f %.3f %.3f %.3f",cp$emissive))       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
grabMaterials <- function(stldir,xfname,compList) {   xmlfile <- sprintf("%s/%s",stldir,xfname)   doc <- read_xml(xmlfile)   its <- xml_find_all(doc,"//*[local-name()='Part']")   for (it in its) {     #print(as.character(it))     compname <- xml_attr(it,"name")     cp <- getCompElement(compList,compname)     if (!is.null(cp)) {       print(sprintf("Part:%s",compname))       nod <- xml_find_first(it,".//*[local-name()='Ambient']")       cp$ambient <- as.numeric(c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a")))       nod <- xml_find_first(it,".//*[local-name()='Diffuse']")       cp$diffuse <- as.numeric(c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a")))       nod <- xml_find_first(it,".//*[local-name()='Specular']")       cp$specular <- as.numeric(c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a")))       nod <- xml_find_first(it,".//*[local-name()='Emissive']")       cp$emissive <- as.numeric(c(xml_attr(nod,"r"),xml_attr(nod,"g"),xml_attr(nod,"b"),xml_attr(nod,"a")))       print(sprintf("   amb - %.3f %.3f %.3f %.3f",cp$ambient))       print(sprintf("   dif - %.3f %.3f %.3f %.3f",cp$diffuse))       print(sprintf("   spc - %.3f %.3f %.3f %.3f",cp$specular))       print(sprintf("   emi - %.3f %.3f %.3f %.3f",cp$emissive))       compList[[compname]] <- cp     }   }   return(compList) }
compList <- grabMaterials(stldir,"Crazyflie_assembly.xml",compList)
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
class(cp$ambient)
cp$ambient
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
traceback()
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
partlist[[1]]$ambient
partList[[1]]$ambient
partList[[1]]
attr(partList[[1]],color)
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
prt$ambient
prt[["ambient"]]
prt[[1]]
ppartname <- partname
partList[[ppartname]]$ambient
length(partList)
partList[[1]]$ambient
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
ppartname <- partname
partname
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
col2rgb(c(1,1,1))
?col2rgb
col2rgb(255*c(1,1,1))
iclr <- round(255 * prta$ambient[1:3])
sprintf("#%2.2x2.2x2.2x",iclr)
rgb2col(c(1,1,1))
sprintf("#%2.2d2.2d2.2d",iclr)
sprintf("#%2.2d%2.2d%2.2d",iclr)
sprintf("#%2.2d%2.2d%2.2d",iclr[[1]],iclr[[2]],iclr[[3]])
sprintf("#%2.2x%2.2d%2.2d",iclr[[1]],iclr[[2]],iclr[[3]])
rtvs::debug_source("rgl4crazyflie.R")
open3d() library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie",partAttList,partVertList,compList) {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname,rownames=F)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- write.csv(fname)   rv <- list   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } rv <- readMesh("crazyflie",partAttList,partVertList,compList)
  i <- 1   id <- cidf$id[[i]]   ptdf <- r$ptdf[r$ptdf$id == id,]
r <- readMesh("crazyflie",partAttList,partVertList,compList)
readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname,rownames=F)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie")
readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie")
readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie")
  i <- 1   id <- r$cidf$id[[i]]   ptdf <- r$ptdf[r$ptdf$id == id,]
id
r$  i <- 1   id <- r$cdf$id[[i]]   ptdf <- r$ptdf[r$ptdf$id == id,]
cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf #for (i in 1:nrow(r$cdf)) { i <- 1 id <- cdf$id[[i]] ptdf <- ptdf[ptdf$id == id,] ptdf$id <- NULL m <- as.matrix(ptdf)
nm <- as.numeric(m)
i <- 1 id <- cdf$id[[i]] ptdf <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(ptdf) vidf <- vidf[vidf$id == id,] vidf$id <- NULL mvi <- as.matrix(vidf)
open3d()
tmesh3d(mpt,mvi)
part <- tmesh3d(mpt,mvi) shade3d(part)
?tmesh3
?tmesh3d
head(mvi)
mvi[1,1]
mvi[2,1]
max(mvi)
min(mvi)
dim(mpt)
head(mpt)
i <- 1 id <- cdf$id[[i]] ptdf <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(ptdf)
ptdf <- r$ptdf
cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vidf$id <- NULL mvi <- as.matrix(v1idf) part <- tmesh3d(mpt,mvi) shade3d(part)
mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
dim(mvi)
head(mvi)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] ptdf$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
head(mpt)
vi1df <- vidf[vidf$id == id,]
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf #for (i in 1:nrow(r$cdf)) { i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,mvi) shade3d(part) #}
head(vidf)
head(mvi)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- as.matrix(vi1df) part <- tmesh3d(mpt,t(mvi)) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- t(as.matrix(vi1df)) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- as.matrix(pt1df) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- t(as.matrix(vi1df)) part <- tmesh3d(mpt,mvi) shade3d(part)
i <- 1 id <- cdf$id[[i]] pt1df <- ptdf[ptdf$id == id,] pt1df$id <- NULL mpt <- t(as.matrix(pt1df)) vi1df <- vidf[vidf$id == id,] vi1df$id <- NULL mvi <- t(as.matrix(vi1df)) part <- tmesh3d(mpt,mvi) shade3d(part)
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   shade3d(part) }
for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   print(cdf$comp[i])   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   shade3d(part) }
for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   shade3d(part) }
for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   cname <- cdf$comp[i]   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(part) }
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   cname <- cdf$comp[i]   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(part) }
i <- 1
  cname <- cdf$comp[i]
  pt1df <- ptdf[ptdf$id == id,]
cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ptdf$id <- 1 for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   cname <- cdf$comp[i]   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(part) }
ptdf$id <- 1 vidf$id <- 1 for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   cname <- cdf$comp[i]   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(part) }
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf for (i in 1:nrow(r$cdf)) {   id <- cdf$id[[i]]   cname <- cdf$comp[i]   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   part <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(part) }
x <- c(11,12,13)
which(x==11)
which(x==12)
y <- c(21,22,13)
matrix(c(x,y),2,3)
matrix(c(x,y),3,2)
mamb <- matrix(p$amb.r,p$amb.g,p$amb.b)
mamb <- matrix(pdf$amb.r,pdf$amb.g,pdf$amb.b)
dim(mamb)
mamb <- matrix(pdf$amb.r,pdf$amb.g,pdf$amb.b,3)
dim(mamb)
mamb <- matrix(pdf$amb.r,pdf$amb.g,pdf$amb.b,3,nrow(pdf))
mamb <- matrix(c(pdf$amb.r,pdf$amb.g,pdf$amb.b),3,nrow(pdf))
dim(mamb)
mamb[1,]
mamb <- matrix(c(pdf$amb.r,pdf$amb.g,pdf$amb.b),nrow(pdf),3)
mamb[1,]
mamb[2,]
mamb <- t(matrix(c(pdf$amb.r,pdf$amb.g,pdf$amb.b),3,nrow(pdf)))
mamb[1,]
mamb[2,]
rvek <- pdf$amb.r
bvek <- pdf$amb.b
gvek <- pdf$amb.g
m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf))))
m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf)))
l <- as.list(m)
colvekToHashString <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) }
rgb <- sapply(l,colvekToHashString)
head(l)
m
l
l <- as.list(t(m))
l
l[[1]]
l[1]
dim(m,2)
dim(m)
dim(m)[2]
1:dim(m)[2]
1:dim(m)[1]
sapply(1:dim(m)[1],function (x)m[x,])
lapply(1:dim(m)[1],function (x)m[x,])
  rgb <- sapply(l,colvekToHashString)
l[[2]]
l[[1]]
l <- lapply(1:dim(m)[1],function (x)m[x,])
l[[1]]
  rgb <- sapply(l,colvekToHashString)
rgb
pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b)
colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf)))# matrix with row as r,g,b   lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) }
pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b)
pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf)))# matrix with row as r,g,b   lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) for (compidx in 1:ncomp) {   id <- cdf$id[[compidx]]   cname <- cdf$comp[compidx]   pname <- cdf$part[compidx]   pidx <- which(pdf$partname == pname)   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
rtvs::debug_source("D:/local/rgl4crazyflie/readcf.R", encoding = "Windows-1252")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf)))# matrix with row as r,g,b   lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) for (compidx in 1:ncomp) {   id <- cdf$id[[compidx]]   cname <- cdf$comp[compidx]   pname <- cdf$part[compidx]   pidx <- which(pdf$partname == pname)   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
pdf
pdf
names(pdf)
pdf[c(1,2,3,4,5,20),]
pdf[,c(1,2,3,4,5,20)]
m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf)))
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- t(matrix(c(rvek,gvek,bvek),3,nrow(pdf)))# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) for (compidx in 1:ncomp) {   id <- cdf$id[[compidx]]   cname <- cdf$comp[compidx]   pname <- cdf$part[compidx]   pidx <- which(pdf$partname == pname)   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
l <- lapply(1:dim(m)[1],function(x) m[x,])
l
pdf[,c(1,2,3,4,5,20)]
m[8,]
m[7,]
m[6,]
rvek
gvek
bvek
matrix(c(rvek,gvek,bvek),3,nrow(pdf))
matrix(c(rvek,gvek,bvek),nrow(pdf),3)
l <- lapply(1:dim(m)[1],function(x) m[x,])
l
m[7,]
m
 m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)
l <- lapply(1:dim(m)[1],function(x) m[x,])
l
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) for (compidx in 1:ncomp) {   id <- cdf$id[[compidx]]   cname <- cdf$comp[compidx]   pname <- cdf$part[compidx]   pidx <- which(pdf$partname == pname)   print(as.character(cdf$comp[i]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) for (cidx in 1:ncomp) {   id <- cdf$id[[compidx]]   cname <- cdf$compname[compidx]   pname <- cdf$partname[compidx]   pidx <- which(pdf$partname == pname)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   cname <- cdf$compname[compidx]   pname <- cdf$partname[compidx]   pidx <- which(pdf$partname == pname)   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   cname <- cdf$compname[compidx]   pname <- cdf$partname[compidx]   pidx <- which(pdf$partname == pname)   print(pname)   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
pdf$partname
which(pdf$partname=="pcb")
for (cidx in 1:ncomp) {   cname <- cdf$compname[compidx]   pname <- cdf$partname[compidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   id <- cdf$id   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   id <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) for (cidx in 1:ncomp) {   id <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   id <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
as.matrix(c(11,12,13,21,22,23,31,32,33),3,3)
matrix(c(11,12,13,21,22,23,31,32,33),3,3)
t(matrix(c(11,12,13,21,22,23,31,32,33),3,3))
cdf$rot <- t(matrix(cdf$rot11,cdf$rot12,cdf$13,                     cdf$rot21,cdf$rot22,cdf$23,                     cdf$rot31,cdf$rot32,cdf$33))
cdf$rot <- t(matrix(c(cdf$rot11,cdf$rot12,cdf$13,                       cdf$rot21,cdf$rot22,cdf$23,                       cdf$rot31,cdf$rot32,cdf$33),3,3) )
cdf$rot <- matrix(c(cdf$rot11,cdf$rot12,cdf$13,                       cdf$rot21,cdf$rot22,cdf$23,                       cdf$rot31,cdf$rot32,cdf$33),3,3)
cdf$l <- as.list(1:8)
cdf$l <- as.list(1:17)
cdf$l
cdf[[17]]
cdf$l[[17]]
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) #cdf$rot <- matrix(c(cdf$rot11,cdf$rot12,cdf$13,                       #cdf$rot21,cdf$rot22,cdf$23,                       #cdf$rot31,cdf$rot32,cdf$33),3,3) #cdf$trn <-  for (cidx in 1:ncomp) {   id <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   mesh <   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot11[cidx],cdf$rot12[cidx],cdf$rot13[cidx],                   cdf$rot21[cidx],cdf$rot22[cidx],cdf$rot23[cidx],                   cdf$rot31[cidx],cdf$rot32[cidx],cdf$rot33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,01),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) }
getTrn(cdf,1)
getTrn(cdf,4)
getRot(cdf,4)
names(cdf)
getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,01),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) }
getRot(cdf,4)
getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) }
getRot(cdf,4)
for (cidx in 1:ncomp) {   id <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   print(as.character(pname))   print(pidx)   print(as.character(cdf$compname[cidx]))   pt1df <- ptdf[ptdf$id == id,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   vi1df <- vidf[vidf$id == id,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi)))   shade3d(mesh,color = pdf$amb[pidx]) }
for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) }
for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) }
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))note   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) }
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) }
addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) }
addAxes(10)
addAxes(100)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) } cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) } addAxes(50)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) } cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) } addAxes(50)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) } cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) } addAxes(50)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) } cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) } addAxes(50)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) } cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) } addAxes(50)
library(rgl) library(stringr) library(xml2) library(hash) # #  Mike Wise - Nov/Dec 2016 # #  Program in R to read in and plot CAD model of CrazyFlie mini-drone # # readMesh <- function(fnameroot = "crazyflie") {   # Components   fname <- sprintf("%s-components.csv",fnameroot)   cdf <- read.csv(fname)   # Parts   fname <- sprintf("%s-parts.csv",fnameroot)   pdf <- read.csv(fname)   # Points   fname <- sprintf("%s-points.csv",fnameroot)   ptdf <- read.csv(fname)   # VertsIdx   fname <- sprintf("%s-vertidx.csv",fnameroot)   vidf <- read.csv(fname)   rv <- list()   rv$cdf <- cdf   rv$pdf <- pdf   rv$ptdf <- ptdf   rv$vidf <- vidf   return(rv) } r <- readMesh("crazyflie") open3d() addAxes <- function(len = 1) {   u <- c(0,1) * len   v <- c(0,0)   w <- c(0,0)   lines3d(u,v,w,color = c("red"))   text3d(u,v,w,c("","X"),color = c("red"))   lines3d(w,u,v,color = c("green"))   text3d(w,u,v,c("","Y"),color = c("green"))   lines3d(v,w,u,color = c("blue"))   text3d(v,w,u,c("","Z"),color = c("blue")) } cdf <- r$cdf pdf <- r$pdf ptdf <- r$ptdf vidf <- r$vidf ncomp <- nrow(r$cdf) npart <- nrow(r$pdf) colVekToStringColor <- function(clr) {   clr <- pmax(0,pmin(clr,1))   iclr <- round(255 * clr)   hclr <- sprintf("#%2.2x%2.2x%2.2x",iclr[[1]],iclr[[2]],iclr[[3]])   return(hclr) } rgbToStringColor <- function(rvek,gvek,bvek) {    m <- matrix(c(rvek,gvek,bvek),nrow(pdf),3)# matrix with row as r,g,b   l <- lapply(1:dim(m)[1],function(x) m[x,]) # now unwrap into a list of rgb's   rgb <- sapply(l,colVekToStringColor) } pdf$amb <- rgbToStringColor(pdf$amb.r,pdf$amb.g,pdf$amb.b) pdf$dif <- rgbToStringColor(pdf$dif.r,pdf$dif.g,pdf$dif.b) pdf$spc <- rgbToStringColor(pdf$spc.r,pdf$spc.g,pdf$spc.b) pdf$ems <- rgbToStringColor(pdf$ems.r,pdf$ems.g,pdf$ems.b) getRot <- function(cdf,cidx) {   rot <- matrix(c(cdf$rot.11[cidx],cdf$rot.12[cidx],cdf$rot.13[cidx],                   cdf$rot.21[cidx],cdf$rot.22[cidx],cdf$rot.23[cidx],                   cdf$rot.31[cidx],cdf$rot.32[cidx],cdf$rot.33[cidx]),3,3)   if (sum(abs(rot)) == 0) {     return(matrix(c(1,0,0,0,1,0,0,0,1),3,3))   } else {     return(rot)   } } getTrn <- function(cdf,cidx) {   trn <- c(cdf$trn.x[cidx],cdf$trn.y[cidx],cdf$trn.z[cidx])   return(trn) } for (cidx in 1:ncomp) {   # setup   cid <- cdf$id[cidx]   cname <- cdf$compname[cidx]   pname <- cdf$partname[cidx]   pidx <- which(pdf$partname == pname)   # get the points for this component   pt1df <- ptdf[ptdf$id == cid,]   pt1df$id <- NULL   mpt <- t(as.matrix(pt1df))   # get the indexs for this component   vi1df <- vidf[vidf$id == cid,]   vi1df$id <- NULL   mvi <- t(as.matrix(vi1df))   # make the mesh, then rotate and transform if necssary   mesh <- tmesh3d(mpt,mvi)   mesh <- rotate3d(mesh,matrix = getRot(cdf,cidx))   trn <- getTrn(cdf,cidx)   mesh <- translate3d(mesh,trn[[1]],trn[[2]],trn[[3]])   # render it   shade3d(mesh,color = pdf$amb[pidx],alpha=pdf$amb.a[pidx])   print(sprintf("%s  pts:%d vidx:%d",cname,length(mpt),length(mvi))) } addAxes(50)
  minx <- miny <- minz <-  +9e99
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("D:/local/rgl4crazyflie/rgl4crazyflie.R", encoding = "Windows-1252")
?rotate3d
?scaleMatrix
scaleMatrix(1,2,3)
rotate3d(matrix=matrix(1,3,3))
rotate3d(matrix=scaleMatrix(1,2,3))
?identityMatrix
identityMatrix()
rtvs::debug_source("rgl4crazyflie.R")
traceback()
matrix(c(1,0,0,0,1,0,0,0,1),3,3)
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
rtvs::debug_source("rgl4crazyflie.R")
